{"version":3,"sources":["i18n.js","serviceWorker.js","index.js"],"names":["i18n","use","Backend","initReactI18next","init","debug","lng","fallbackLng","whitelist","Boolean","window","location","hostname","match","App","React","lazy","loadingPage","Grid","container","item","xs","justify","alignItems","direction","Typography","CircularProgress","ReactDOM","render","fallback","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oRAIeA,IACVC,IAAIC,KACJD,IAAIE,KACJC,KAAK,CACFC,OAAO,EACPC,IAAK,KACLC,YAAa,KACbC,UAAW,CAAC,KAAM,Q,aCCNC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCRN,MAAMC,EAAMC,IAAMC,KAAK,IACZ,qDAGLC,EAAc,kBAACC,EAAA,EAAD,CAAMC,WAAS,GAC/B,kBAACD,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,IACX,kBAACH,EAAA,EAAD,CAAMC,WAAS,EAACG,QAAS,SAAUC,WAAY,SAAUC,UAAW,UAChE,kBAACN,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GACX,kBAACI,EAAA,EAAD,qBAEJ,kBAACP,EAAA,EAAD,CAAME,MAAI,EAACC,GAAI,GACX,kBAACK,EAAA,EAAD,UAMhBC,IAASC,OACL,kBAAC,IAAD,KACI,kBAAC,WAAD,CAAUC,SAAUZ,GAChB,kBAACH,EAAD,QAGRgB,SAASC,eAAe,SDgGtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAKC,IACjCA,EAAaC,iB","file":"static/js/main.2f7c6bde.chunk.js","sourcesContent":["import i18n from 'i18next';\r\nimport { initReactI18next } from 'react-i18next';\r\nimport Backend from 'i18next-xhr-backend';\r\n\r\nexport default i18n\r\n    .use(Backend)\r\n    .use(initReactI18next)\r\n    .init({\r\n        debug: false,\r\n        lng: 'pl',\r\n        fallbackLng: 'en',\r\n        whitelist: ['en', 'pl'],\r\n    });\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport React, {Suspense} from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './i18n';\r\nimport './index.css';\r\nimport {BrowserRouter} from \"react-router-dom\";\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nconst App = React.lazy(() => {\r\n    return import('./App');\r\n});\r\n\r\nconst loadingPage = <Grid container>\r\n    <Grid item xs={12}>\r\n        <Grid container justify={\"center\"} alignItems={\"center\"} direction={\"column\"}>\r\n            <Grid item xs={3}>\r\n                <Typography>WFRP Helper</Typography>\r\n            </Grid>\r\n            <Grid item xs={3}>\r\n                <CircularProgress/>\r\n            </Grid>\r\n        </Grid>\r\n    </Grid>\r\n</Grid>;\r\n\r\nReactDOM.render(\r\n    <BrowserRouter>\r\n        <Suspense fallback={loadingPage}>\r\n            <App/>\r\n        </Suspense>\r\n    </BrowserRouter>,\r\n    document.getElementById('root'));\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}